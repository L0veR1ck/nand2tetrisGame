class GeometryDash 
{
    field boolen GameRun;

    constructor GeometryDash new() 
    {
        let GameRun = true;
        return this;
    }

    method void run()
    {
        var int InputKey;
        var int Ticks;
        var int TicksLimit;
        var int Timer;
        var int MapSpeed;

        var Player player;
        var UI ui;
        var Floor floor;
        var Cube cube;
        var Spike spike;

        let MapSpeed = 24;
        let Ticks = 0;
        let TicksLimit = 4500;
        let Timer = 0;

        let player = Player.new(128, 159, 48);
        let ui = UI.new();
        let floor = Floor.new(207, MapSpeed);
        let cube = Cube.new(400, 159, 48, MapSpeed);
        let spike = Spike.new(400, 159-48, 48, MapSpeed);

        do floor.update();
        do player.update();

        while (GameRun)
        {
            let InputKey = Keyboard.keyPressed();
            if ((InputKey = 140) | (InputKey = 81))
            {
                let GameRun = false;
            }
            if ((InputKey = 131) | (InputKey = 32) | (InputKey = 87))
            {
                do player.jump(50);
            }
            if (Ticks = TicksLimit) // Sys.wait() плохо оптимизирован и он создаёт много артефактов при отрисовке
            {
                do Screen.clearScreen();
                do player.update();
                do ui.update();
                do floor.update();
                do cube.update();
                do spike.update();
                if (checkCubeContact(player, cube))
                {
                    do ui.addAttempt();
                    let Timer = 0;
                }
                let Ticks = 0;
                let Timer = Timer + 1;
            }
            let Ticks = Ticks + 1;
        }

        do floor.dispose();
        do player.dispose();
        //do Screen.clearScreen();
        return;
    }

    method boolen checkCubeContact(Player player, Cube cube)
    {
        var int pS;
        var int pX;
        var int pY;
        var int cS;
        var int cX;
        var int cY;

        let pS = player.getSize();
        let pX = player.getCoordX();
        let pY = player.getCoordY();
        let cS = cube.getSize();
        let cX = cube.getCoordX();
        let cY = cube.getCoordY();

        return ~((pY > (cY+cS)) | ((pY+pS) < cY) | ((pX+pS) < cX) | (pX > (cX+cS)));
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}